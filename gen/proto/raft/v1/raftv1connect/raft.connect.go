// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/raft/v1/raft.proto

package raftv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RiverPhillips/raft/gen/proto/raft/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RaftServiceName is the fully-qualified name of the RaftService service.
	RaftServiceName = "raft.v1.RaftService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RaftServiceAppendEntriesProcedure is the fully-qualified name of the RaftService's AppendEntries
	// RPC.
	RaftServiceAppendEntriesProcedure = "/raft.v1.RaftService/AppendEntries"
	// RaftServiceRequestVoteProcedure is the fully-qualified name of the RaftService's RequestVote RPC.
	RaftServiceRequestVoteProcedure = "/raft.v1.RaftService/RequestVote"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	raftServiceServiceDescriptor             = v1.File_proto_raft_v1_raft_proto.Services().ByName("RaftService")
	raftServiceAppendEntriesMethodDescriptor = raftServiceServiceDescriptor.Methods().ByName("AppendEntries")
	raftServiceRequestVoteMethodDescriptor   = raftServiceServiceDescriptor.Methods().ByName("RequestVote")
)

// RaftServiceClient is a client for the raft.v1.RaftService service.
type RaftServiceClient interface {
	AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error)
	RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error)
}

// NewRaftServiceClient constructs a client for the raft.v1.RaftService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaftServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RaftServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raftServiceClient{
		appendEntries: connect.NewClient[v1.AppendEntriesRequest, v1.AppendEntriesResponse](
			httpClient,
			baseURL+RaftServiceAppendEntriesProcedure,
			connect.WithSchema(raftServiceAppendEntriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		requestVote: connect.NewClient[v1.RequestVoteRequest, v1.RequestVoteResponse](
			httpClient,
			baseURL+RaftServiceRequestVoteProcedure,
			connect.WithSchema(raftServiceRequestVoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// raftServiceClient implements RaftServiceClient.
type raftServiceClient struct {
	appendEntries *connect.Client[v1.AppendEntriesRequest, v1.AppendEntriesResponse]
	requestVote   *connect.Client[v1.RequestVoteRequest, v1.RequestVoteResponse]
}

// AppendEntries calls raft.v1.RaftService.AppendEntries.
func (c *raftServiceClient) AppendEntries(ctx context.Context, req *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error) {
	return c.appendEntries.CallUnary(ctx, req)
}

// RequestVote calls raft.v1.RaftService.RequestVote.
func (c *raftServiceClient) RequestVote(ctx context.Context, req *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error) {
	return c.requestVote.CallUnary(ctx, req)
}

// RaftServiceHandler is an implementation of the raft.v1.RaftService service.
type RaftServiceHandler interface {
	AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error)
	RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error)
}

// NewRaftServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaftServiceHandler(svc RaftServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	raftServiceAppendEntriesHandler := connect.NewUnaryHandler(
		RaftServiceAppendEntriesProcedure,
		svc.AppendEntries,
		connect.WithSchema(raftServiceAppendEntriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raftServiceRequestVoteHandler := connect.NewUnaryHandler(
		RaftServiceRequestVoteProcedure,
		svc.RequestVote,
		connect.WithSchema(raftServiceRequestVoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/raft.v1.RaftService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RaftServiceAppendEntriesProcedure:
			raftServiceAppendEntriesHandler.ServeHTTP(w, r)
		case RaftServiceRequestVoteProcedure:
			raftServiceRequestVoteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRaftServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaftServiceHandler struct{}

func (UnimplementedRaftServiceHandler) AppendEntries(context.Context, *connect.Request[v1.AppendEntriesRequest]) (*connect.Response[v1.AppendEntriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raft.v1.RaftService.AppendEntries is not implemented"))
}

func (UnimplementedRaftServiceHandler) RequestVote(context.Context, *connect.Request[v1.RequestVoteRequest]) (*connect.Response[v1.RequestVoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raft.v1.RaftService.RequestVote is not implemented"))
}
